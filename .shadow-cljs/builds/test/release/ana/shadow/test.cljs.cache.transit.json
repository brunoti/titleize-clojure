["^ ","~:output",["^ ","~:js","goog.provide('shadow.test');\n/**\n * like ct/test-vars-block but more generic\n * groups vars by namespace, executes fixtures\n */\nshadow.test.test_vars_grouped_block = (function shadow$test$test_vars_grouped_block(vars){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p__9738){\nvar vec__9739 = p__9738;\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9739,(0),null);\nvar vars__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9739,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-test-ns\",\"begin-test-ns\",-1701237033),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n}),(function (){\nreturn cljs.test.block((function (){var env = cljs.test.get_current_env();\nvar once_fixtures = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167),ns], null));\nvar each_fixtures = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977),ns], null));\nvar G__9751 = cljs.test.execution_strategy(once_fixtures,each_fixtures);\nvar G__9751__$1 = (((G__9751 instanceof cljs.core.Keyword))?G__9751.fqn:null);\nswitch (G__9751__$1) {\ncase \"async\":\nreturn cljs.test.wrap_map_fixtures(once_fixtures,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.test.wrap_map_fixtures,each_fixtures),cljs.test.test_var_block),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"test\",\"test\",577538877),cljs.core.meta),vars__$1)], 0)));\n\nbreak;\ncase \"sync\":\nvar each_fixture_fn = cljs.test.join_fixtures(each_fixtures);\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nvar G__9774 = (function (){\nvar seq__9775 = cljs.core.seq(vars__$1);\nvar chunk__9776 = null;\nvar count__9777 = (0);\nvar i__9778 = (0);\nwhile(true){\nif((i__9778 < count__9777)){\nvar v = chunk__9776.cljs$core$IIndexed$_nth$arity$2(null,i__9778);\nvar temp__5804__auto___9961 = new cljs.core.Keyword(null,\"test\",\"test\",577538877).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nif(cljs.core.truth_(temp__5804__auto___9961)){\nvar t_9962 = temp__5804__auto___9961;\nvar G__9788_9963 = ((function (seq__9775,chunk__9776,count__9777,i__9778,t_9962,temp__5804__auto___9961,v,each_fixture_fn,G__9751,G__9751__$1,env,once_fixtures,each_fixtures,vec__9739,ns,vars__$1){\nreturn (function (){\nreturn cljs.test.run_block(cljs.test.test_var_block_STAR_(v,cljs.test.disable_async(t_9962)));\n});})(seq__9775,chunk__9776,count__9777,i__9778,t_9962,temp__5804__auto___9961,v,each_fixture_fn,G__9751,G__9751__$1,env,once_fixtures,each_fixtures,vec__9739,ns,vars__$1))\n;\n(each_fixture_fn.cljs$core$IFn$_invoke$arity$1 ? each_fixture_fn.cljs$core$IFn$_invoke$arity$1(G__9788_9963) : each_fixture_fn.call(null,G__9788_9963));\n} else {\n}\n\n\nvar G__9964 = seq__9775;\nvar G__9965 = chunk__9776;\nvar G__9966 = count__9777;\nvar G__9967 = (i__9778 + (1));\nseq__9775 = G__9964;\nchunk__9776 = G__9965;\ncount__9777 = G__9966;\ni__9778 = G__9967;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__9775);\nif(temp__5804__auto__){\nvar seq__9775__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__9775__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__9775__$1);\nvar G__9968 = cljs.core.chunk_rest(seq__9775__$1);\nvar G__9969 = c__5568__auto__;\nvar G__9970 = cljs.core.count(c__5568__auto__);\nvar G__9971 = (0);\nseq__9775 = G__9968;\nchunk__9776 = G__9969;\ncount__9777 = G__9970;\ni__9778 = G__9971;\ncontinue;\n} else {\nvar v = cljs.core.first(seq__9775__$1);\nvar temp__5804__auto___9972__$1 = new cljs.core.Keyword(null,\"test\",\"test\",577538877).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nif(cljs.core.truth_(temp__5804__auto___9972__$1)){\nvar t_9973 = temp__5804__auto___9972__$1;\nvar G__9815_9974 = ((function (seq__9775,chunk__9776,count__9777,i__9778,t_9973,temp__5804__auto___9972__$1,v,seq__9775__$1,temp__5804__auto__,each_fixture_fn,G__9751,G__9751__$1,env,once_fixtures,each_fixtures,vec__9739,ns,vars__$1){\nreturn (function (){\nreturn cljs.test.run_block(cljs.test.test_var_block_STAR_(v,cljs.test.disable_async(t_9973)));\n});})(seq__9775,chunk__9776,count__9777,i__9778,t_9973,temp__5804__auto___9972__$1,v,seq__9775__$1,temp__5804__auto__,each_fixture_fn,G__9751,G__9751__$1,env,once_fixtures,each_fixtures,vec__9739,ns,vars__$1))\n;\n(each_fixture_fn.cljs$core$IFn$_invoke$arity$1 ? each_fixture_fn.cljs$core$IFn$_invoke$arity$1(G__9815_9974) : each_fixture_fn.call(null,G__9815_9974));\n} else {\n}\n\n\nvar G__9975 = cljs.core.next(seq__9775__$1);\nvar G__9976 = null;\nvar G__9977 = (0);\nvar G__9978 = (0);\nseq__9775 = G__9975;\nchunk__9776 = G__9976;\ncount__9777 = G__9977;\ni__9778 = G__9978;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\nvar fexpr__9773 = cljs.test.join_fixtures(once_fixtures);\nreturn (fexpr__9773.cljs$core$IFn$_invoke$arity$1 ? fexpr__9773.cljs$core$IFn$_invoke$arity$1(G__9774) : fexpr__9773.call(null,G__9774));\n})], null);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__9751__$1)].join('')));\n\n}\n})());\n}),(function (){\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-test-ns\",\"end-test-ns\",1620675645),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n})], null);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.group_by((function (p1__9724_SHARP_){\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__9724_SHARP_));\n}),vars))], 0));\n});\n/**\n * Like test-ns, but returns a block for further composition and\n *   later execution.  Does not clear the current env.\n */\nshadow.test.test_ns_block = (function shadow$test$test_ns_block(ns){\n\nvar map__9859 = shadow.test.env.get_test_ns_info(ns);\nvar map__9859__$1 = cljs.core.__destructure_map(map__9859);\nvar test_ns = map__9859__$1;\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9859__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nif(cljs.core.not(test_ns)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"Namespace: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),\" not found, no tests to run.\"].join('')], 0));\n})], null);\n} else {\nreturn shadow.test.test_vars_grouped_block(vars);\n}\n});\nshadow.test.prepare_test_run = (function shadow$test$prepare_test_run(p__9862,vars){\nvar map__9863 = p__9862;\nvar map__9863__$1 = cljs.core.__destructure_map(map__9863);\nvar env = map__9863__$1;\nvar report_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9863__$1,new cljs.core.Keyword(null,\"report-fn\",\"report-fn\",-549046115));\nvar orig_report = cljs.test.report;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\ncljs.test.set_env_BANG_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(\"shadow.test\",\"report-fn\",\"shadow.test/report-fn\",1075704061),orig_report));\n\nif(cljs.core.truth_(report_fn)){\n(cljs.test.report = report_fn);\n} else {\n}\n\nvar seq__9864_9979 = cljs.core.seq(shadow.test.env.get_tests());\nvar chunk__9866_9980 = null;\nvar count__9867_9981 = (0);\nvar i__9868_9982 = (0);\nwhile(true){\nif((i__9868_9982 < count__9867_9981)){\nvar vec__9906_9983 = chunk__9866_9980.cljs$core$IIndexed$_nth$arity$2(null,i__9868_9982);\nvar test_ns_9984 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9906_9983,(0),null);\nvar ns_info_9985 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9906_9983,(1),null);\nvar map__9909_9986 = ns_info_9985;\nvar map__9909_9987__$1 = cljs.core.__destructure_map(map__9909_9986);\nvar fixtures_9988 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9909_9987__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar temp__5804__auto___9989 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures_9988);\nif(cljs.core.truth_(temp__5804__auto___9989)){\nvar fix_9990 = temp__5804__auto___9989;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_9984,fix_9990], 0));\n} else {\n}\n\nvar temp__5804__auto___9991 = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures_9988);\nif(cljs.core.truth_(temp__5804__auto___9991)){\nvar fix_9992 = temp__5804__auto___9991;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_9984,fix_9992], 0));\n} else {\n}\n\n\nvar G__9993 = seq__9864_9979;\nvar G__9994 = chunk__9866_9980;\nvar G__9995 = count__9867_9981;\nvar G__9996 = (i__9868_9982 + (1));\nseq__9864_9979 = G__9993;\nchunk__9866_9980 = G__9994;\ncount__9867_9981 = G__9995;\ni__9868_9982 = G__9996;\ncontinue;\n} else {\nvar temp__5804__auto___9997 = cljs.core.seq(seq__9864_9979);\nif(temp__5804__auto___9997){\nvar seq__9864_9998__$1 = temp__5804__auto___9997;\nif(cljs.core.chunked_seq_QMARK_(seq__9864_9998__$1)){\nvar c__5568__auto___9999 = cljs.core.chunk_first(seq__9864_9998__$1);\nvar G__10000 = cljs.core.chunk_rest(seq__9864_9998__$1);\nvar G__10001 = c__5568__auto___9999;\nvar G__10002 = cljs.core.count(c__5568__auto___9999);\nvar G__10003 = (0);\nseq__9864_9979 = G__10000;\nchunk__9866_9980 = G__10001;\ncount__9867_9981 = G__10002;\ni__9868_9982 = G__10003;\ncontinue;\n} else {\nvar vec__9913_10004 = cljs.core.first(seq__9864_9998__$1);\nvar test_ns_10005 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9913_10004,(0),null);\nvar ns_info_10006 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9913_10004,(1),null);\nvar map__9924_10007 = ns_info_10006;\nvar map__9924_10008__$1 = cljs.core.__destructure_map(map__9924_10007);\nvar fixtures_10009 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9924_10008__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar temp__5804__auto___10010__$1 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures_10009);\nif(cljs.core.truth_(temp__5804__auto___10010__$1)){\nvar fix_10011 = temp__5804__auto___10010__$1;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_10005,fix_10011], 0));\n} else {\n}\n\nvar temp__5804__auto___10012__$1 = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures_10009);\nif(cljs.core.truth_(temp__5804__auto___10012__$1)){\nvar fix_10013 = temp__5804__auto___10012__$1;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_10005,fix_10013], 0));\n} else {\n}\n\n\nvar G__10014 = cljs.core.next(seq__9864_9998__$1);\nvar G__10015 = null;\nvar G__10016 = (0);\nvar G__10017 = (0);\nseq__9864_9979 = G__10014;\nchunk__9866_9980 = G__10015;\ncount__9867_9981 = G__10016;\ni__9868_9982 = G__10017;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-run-tests\",\"begin-run-tests\",309363062),new cljs.core.Keyword(null,\"var-count\",\"var-count\",-1513152110),cljs.core.count(vars),new cljs.core.Keyword(null,\"ns-count\",\"ns-count\",-1269070724),cljs.core.count(cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__9861_SHARP_){\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__9861_SHARP_));\n}),vars)))], null));\n})], null);\n});\nshadow.test.finish_test_run = (function shadow$test$finish_test_run(block){\n\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(block,(function (){\nvar map__9925 = cljs.test.get_current_env();\nvar map__9925__$1 = cljs.core.__destructure_map(map__9925);\nvar env = map__9925__$1;\nvar report_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9925__$1,new cljs.core.Keyword(\"shadow.test\",\"report-fn\",\"shadow.test/report-fn\",1075704061));\nvar report_counters = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9925__$1,new cljs.core.Keyword(null,\"report-counters\",\"report-counters\",-1702609242));\ncljs.test.report.call(null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report_counters,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"summary\",\"summary\",380847952)));\n\ncljs.test.report.call(null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report_counters,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-run-tests\",\"end-run-tests\",267300563)));\n\nreturn (cljs.test.report = report_fn);\n}));\n});\n/**\n * tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\n */\nshadow.test.run_test_vars = (function shadow$test$run_test_vars(var_args){\nvar G__9927 = arguments.length;\nswitch (G__9927) {\ncase 1:\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$1 = (function (test_vars){\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),test_vars);\n}));\n\n(shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2 = (function (env,vars){\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.run_test_vars.cljs$lang$maxFixedArity = 2);\n\n/**\n * test all vars for given namespace symbol\n */\nshadow.test.test_ns = (function shadow$test$test_ns(var_args){\nvar G__9942 = arguments.length;\nswitch (G__9942) {\ncase 1:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),ns);\n}));\n\n(shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2 = (function (env,ns){\nvar map__9943 = shadow.test.env.get_test_ns_info(ns);\nvar map__9943__$1 = cljs.core.__destructure_map(map__9943);\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9943__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.test_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * test all vars in specified namespace symbol set\n */\nshadow.test.run_tests = (function shadow$test$run_tests(var_args){\nvar G__9950 = arguments.length;\nswitch (G__9950) {\ncase 0:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0());\n}));\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,shadow.test.env.get_test_namespaces());\n}));\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,namespaces){\n\nvar vars = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__9944_SHARP_){\nreturn cljs.core.contains_QMARK_(namespaces,new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__9944_SHARP_)));\n}),shadow.test.env.get_test_vars());\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.run_tests.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs all tests in all namespaces; prints results.\n *   Optional argument is a regular expression; only namespaces with\n *   names matching the regular expression (with re-matches) will be\n *   tested.\n */\nshadow.test.run_all_tests = (function shadow$test$run_all_tests(var_args){\nvar G__9959 = arguments.length;\nswitch (G__9959) {\ncase 0:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),null);\n}));\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(env,null);\n}));\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,re){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__9957_SHARP_){\nvar or__5045__auto__ = (re == null);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.re_matches(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__9957_SHARP_));\n}\n}),shadow.test.env.get_test_namespaces())));\n}));\n\n(shadow.test.run_all_tests.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","~:file","shadow/test.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.test","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.test","^I","~$ct","^I","~$shadow.test.env","^K","~$env","^K","~$cljs.core","^M","~$goog","^N"],"~:seen",["^A",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^M","^M","^I","^I","^J","^I","^K","^K","^L","^K"],"~:form",["~#list",["~$ns","^C","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test",["^T",["^P",["^I","~:as","^J"],["^K","^V","^L"]]]]],"~:flags",["^ ","^P",["^A",[]]],"~:js-deps",["^ "],"~:deps",["^N","^M","^I","^K"]],"^F","^C","~:resource-id",["~:shadow.build.classpath/resource","shadow/test.cljs"],"~:compiled-at",1700248986670,"^D",["^ ","^I","^I","^J","^I","^K","^K","^L","^K","^M","^M","^N","^N"],"~:resource-name","shadow/test.cljs","~:warnings",[],"~:source","(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(defn test-vars-grouped-block\n  \"like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures\"\n  [vars]\n  (->> vars\n       (group-by #(-> % meta :ns))\n       ;; more predictable test ordering\n       ;; FIXME: should maybe also allow randomizing to detect tests that rely on call order\n       (sort-by first)\n       (mapcat (fn [[ns vars]]\n                 [(fn []\n                    (ct/report {:type :begin-test-ns :ns ns}))\n                  ;; FIXME: this is too complex, should simplify\n                  (fn []\n                    (ct/block\n                      (let [env (ct/get-current-env)\n                            once-fixtures (get-in env [:once-fixtures ns])\n                            each-fixtures (get-in env [:each-fixtures ns])]\n                        (case (ct/execution-strategy once-fixtures each-fixtures)\n                          :async\n                          (->> vars\n                               (filter (comp :test meta))\n                               (mapcat (comp (partial ct/wrap-map-fixtures each-fixtures)\n                                         ct/test-var-block))\n                               (ct/wrap-map-fixtures once-fixtures))\n                          :sync\n                          (let [each-fixture-fn (ct/join-fixtures each-fixtures)]\n                            [(fn []\n                               ((ct/join-fixtures once-fixtures)\n                                (fn []\n                                  (doseq [v vars]\n                                    (when-let [t (:test (meta v))]\n                                      ;; (alter-meta! v update :test disable-async)\n                                      (each-fixture-fn\n                                        (fn []\n                                          ;; (test-var v)\n                                          (ct/run-block\n                                            (ct/test-var-block* v (ct/disable-async t))))))))))])))))\n                  (fn []\n                    (ct/report {:type :end-test-ns :ns ns}))])\n         )))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([ns]\n   {:pre [(symbol? ns)]}\n   (let [{:keys [vars] :as test-ns} (env/get-test-ns-info ns)]\n\n     (if-not test-ns\n       [(fn []\n          (println (str \"Namespace: \" ns \" not found, no tests to run.\")))]\n       (test-vars-grouped-block vars)))))\n\n(defn prepare-test-run [{:keys [report-fn] :as env} vars]\n  (let [orig-report ct/report]\n    [(fn []\n       (ct/set-env! (assoc env ::report-fn orig-report))\n\n       (when report-fn\n         (set! ct/report report-fn))\n\n       ;; setup all known fixtures\n       (doseq [[test-ns ns-info] (env/get-tests)\n               :let [{:keys [fixtures]} ns-info]]\n         (when-let [fix (:once fixtures)]\n           (ct/update-current-env! [:once-fixtures] assoc test-ns fix))\n\n         (when-let [fix (:each fixtures)]\n           (ct/update-current-env! [:each-fixtures] assoc test-ns fix)))\n\n       ;; just in case report-fn wants to know when things starts\n       (ct/report {:type :begin-run-tests\n                   :var-count (count vars)\n                   :ns-count (->> vars\n                                  (map #(-> % meta :ns))\n                                  (set)\n                                  (count))}))]))\n\n(defn finish-test-run [block]\n  {:pre [(vector? block)]}\n  (conj block\n    (fn []\n      (let [{::keys [report-fn] :keys [report-counters] :as env} (ct/get-current-env)]\n        (ct/report (assoc report-counters :type :summary))\n        (ct/report (assoc report-counters :type :end-run-tests))\n        (set! ct/report report-fn)\n        ))))\n\n;; API Fns\n\n(defn run-test-vars\n  \"tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\"\n  ([test-vars]\n   (run-test-vars (ct/empty-env) test-vars))\n  ([env vars]\n   (-> (prepare-test-run env vars)\n       (into (test-vars-grouped-block vars))\n       (finish-test-run)\n       (ct/run-block))))\n\n(defn test-ns\n  \"test all vars for given namespace symbol\"\n  ([ns]\n   (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (let [{:keys [vars]} (env/get-test-ns-info ns)]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-tests\n  \"test all vars in specified namespace symbol set\"\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   {:pre [(set? namespaces)]}\n   (let [vars (->> (env/get-test-vars)\n                   (filter #(contains? namespaces (-> % meta :ns))))]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into #{})))))\n","~:reader-features",["^A",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["shadow.test/test-vars-grouped-block","vars","p1__9724#","cljs.core/group-by","cljs.core/meta","cljs.core.sort_by","cljs.core/first","cljs.core.mapcat","p__9738","vec__9739","cljs.core.nth","ns","cljs.test/report","cljs.test/block","env","cljs.test/get-current-env","once-fixtures","cljs.core.get_in","each-fixtures","G__9751","cljs.core/Keyword","js/Error","cljs.test/execution-strategy","cljs.core.filter","cljs.core.comp","cljs.core.partial","cljs.test/wrap-map-fixtures","cljs.test/test-var-block","each-fixture-fn","cljs.test/join-fixtures","G__9774","fexpr__9773","seq__9775","cljs.core/seq","chunk__9776","count__9777","i__9778","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","v","t","G__9788","G__9815","cljs.test/run-block","cljs.test/test-var-block*","cljs.test/disable-async","shadow.test/test-ns-block","map__9859","cljs.core/--destructure-map","cljs.core.get","test-ns","shadow.test.env/get-test-ns-info","cljs.core/not","cljs.core.println","p__9862","map__9863","shadow.test/prepare-test-run","report-fn","orig-report","cljs.test/set-env!","cljs.core.assoc","seq__9864","chunk__9866","count__9867","i__9868","vec__9906","map__9909","vec__9913","map__9924","ns-info","shadow.test.env/get-tests","fixtures","fix","cljs.test.update_current_env_BANG_","cljs.core/assoc","p1__9861#","cljs.core.map","cljs.core/set","shadow.test/finish-test-run","block","cljs.core.conj","map__9925","report-counters","var_args","G__9927","shadow.test/run-test-vars","test-vars","shadow.test.run_test_vars","cljs.test.empty_env","cljs.core.into","G__9942","shadow.test/test-ns","shadow.test.test_ns","map__9943","G__9950","shadow.test/run-tests","shadow.test.run_tests","shadow.test.env/get-test-namespaces","namespaces","shadow.test.env/get-test-vars","p1__9944#","cljs.core/contains?","G__9959","shadow.test/run-all-tests","shadow.test.run_all_tests","re","p1__9957#","or__5045__auto__","cljs.core/re-matches"]],"~:used-vars",["^A",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$cljs.core/comp","~$cljs.test/wrap-map-fixtures","~$shadow.test.env/get-test-namespaces","~$shadow.test/run-all-tests","~$cljs.core/filter","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.test/test-var-block","~$cljs.core/count","~$cljs.test/set-env!","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/group-by","~$cljs.test/empty-env","~$cljs.core/chunk-rest","~$cljs.core/set","~$shadow.test/run-test-vars","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$cljs.test/run-block","~$cljs.test/join-fixtures","~$shadow.test/finish-test-run","~$cljs.core/get-in","~$cljs.test/update-current-env!","~$cljs.test/execution-strategy","~$shadow.test.env/get-test-ns-info","~$cljs.core/get","~$cljs.core/-nth","~$shadow.test/test-ns-block","~$cljs.core/nth","~$cljs.core/meta","~$cljs.core/println","~$shadow.test.env/get-test-vars","~$cljs.core/next","~$shadow.test/test-ns","~$shadow.test/test-vars-grouped-block","~$cljs.core/not","~$cljs.test/disable-async","~$cljs.core/assoc","~$cljs.test/test-var-block*","~$shadow.test/run-tests","~$shadow.test.env/get-tests","~$cljs.core/first","~$cljs.core/sort-by","~$js/Error","~$cljs.test/get-current-env","~$shadow.test/prepare-test-run","~$cljs.core/chunked-seq?","~$cljs.test/report","~$cljs.test/block"]]],"~:cache-keys",["~#cmap",[["^[","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^A",[]],"~:deps-syms",["^N","~$goog.dom.HtmlElement"]]],["^[","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^[","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2P"]]],["^[","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O"]]],["^[","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2M","^2P"]]],["^[","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^M","~$clojure.string","~$goog.string","~$goog.string.StringBuffer"]]],["^[","shadow/test.cljs"],["d8887266b31c9258451f5988ad42fd9d21a83e36","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^M","^I","^K"]]],["^[","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O"]]],"~:SHADOW-TIMESTAMP",[1700248773000,1700248773000,1670199780000],["^[","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","~$goog.reflect"]]],["^[","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","~$goog.fs.blob","^2S","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2U","^2V"]]],["^[","shadow/test/env.cljs"],["d8887266b31c9258451f5988ad42fd9d21a83e36","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^M"]]],["^[","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2U","~$goog.html.SafeUrl","^2V","^2O","^2P"]]],["^[","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^31","~$goog.html.SafeStyle","^33","^2T","~$goog.html.uncheckedconversions","^2U","^2P"]]],["^[","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","~$goog.dom.TagName","^2O","~$goog.dom.element"]]],["^[","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2U","^31","^38","~$goog.html.SafeStyleSheet","^33","^3:","^2T","^2V","^2O","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2P","~$goog.dom.tags","^32"]]],["^[","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^3?"]]],["^[","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^3>","^2O","~$goog.collections.maps","^2X","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2N"]]],["^[","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",[]]],["^[","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^3>","^3?"]]],["^[","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^M","^2X","^2Y"]]],["^[","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","~$goog.dom.safe","^39","^2U","^2P"]]],["^[","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2P","^2R"]]],["^[","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","~$goog.flags"]]],["^[","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^3B","^3:"]]],["^[","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","^37","^31","^38","^3<","^33","^2T","^2U","^2P"]]],["^[","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N"]]],["^[","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","~$goog.math.Long","~$goog.math.Integer","^2X","^3?","^3>","~$goog.Uri","^2Y"]]],["^[","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2U","^2V","^32","^2O"]]],["^[","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2U","^38","^2V","^3?","^2O","^2P"]]],["^[","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2["]]],["^[","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","^2X"]]],["^[","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^2O","^2V"]]],["^[","cljs/test.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2H",["^ ","^2I",null,"^2J",["^A",[]],"^2K",["^N","^M","^2W","~$cljs.pprint"]]]]],"~:clj-info",["^ ","jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/test.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/thheller/shadow-cljs/2.26.0/shadow-cljs-2.26.0-aot.jar!/shadow/test/env.clj",1700248773000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/template.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/api.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1670199780000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","^7","shadow/test.cljs","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>"],"^?",null,"^@",["^A",[]],"^B","^C","^D",["^ "],"^G",null,"^H",["^ ","^I","^I","^J","^I","^K","^K","^L","^K","^M","^M","^N","^N"],"^O",["^A",["^P"]],"~:shadow/js-access-global",["^A",["Error"]],"^Q",null,"~:defs",["^ ","~$test-vars-grouped-block",["^ ","~:protocol-inline",null,"^5",["^ ","^7","shadow/test.cljs","^8",7,"^9",7,"^:",7,"^;",30,"~:arglists",["^T",["~$quote",["^T",[["~$vars"]]]]],"^6","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures"],"^B","^27","^7","shadow/test.cljs","^;",30,"~:method-params",["^T",[["^4M"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^9",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^T",["~$defn","^4I","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures",["^4M"],["^T",["~$->>","^4M",["^T",["~$group-by",["^T",["~$fn*",["~$p1__9724#"],["^T",["~$->","^4Y","~$meta","^F"]]]]]],["^T",["~$sort-by","~$first"]],["^T",["~$mapcat",["^T",["~$fn",[["^U","^4M"]],[["^T",["^53",[],["^T",["~$ct/report",["^ ","~:type","~:begin-test-ns","^F","^U"]]]]],["^T",["^53",[],["^T",["~$ct/block",["^T",["~$let",["^L",["^T",["~$ct/get-current-env"]],"~$once-fixtures",["^T",["~$get-in","^L",["~:once-fixtures","^U"]]],"~$each-fixtures",["^T",["^5;","^L",["~:each-fixtures","^U"]]]],["^T",["~$case",["^T",["~$ct/execution-strategy","^5:","^5="]],"~:async",["^T",["^4V","^4M",["^T",["~$filter",["^T",["~$comp","~:test","^4["]]]],["^T",["^52",["^T",["^5C",["^T",["~$partial","~$ct/wrap-map-fixtures","^5="]],"~$ct/test-var-block"]]]],["^T",["^5F","^5:"]]]],"~:sync",["^T",["^58",["~$each-fixture-fn",["^T",["~$ct/join-fixtures","^5="]]],[["^T",["^53",[],["^T",[["^T",["^5J","^5:"]],["^T",["^53",[],["^T",["~$doseq",["~$v","^4M"],["^T",["~$when-let",["~$t",["^T",["^5D",["^T",["^4[","~$v"]]]]],["^T",["^5I",["^T",["^53",[],["^T",["~$ct/run-block",["^T",["~$ct/test-var-block*","~$v",["^T",["~$ct/disable-async","~$t"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],["^T",["^53",[],["^T",["^54",["^ ","^55","~:end-test-ns","^F","^U"]]]]]]]]]]]]]]],"~:variadic?",false,"^8",7,"~:ret-tag","~$any","^:",7,"~:max-fixed-arity",1,"~:fn-var",true,"^4K",["^T",["^4L",["^T",[["^4M"]]]]],"^6","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures"],"~$test-ns-block",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",49,"^9",7,"^:",49,"^;",20,"^4K",["^T",["^4L",["^T",[["^U"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"^B","^20","^7","shadow/test.cljs","^;",20,"^4N",["^T",[["^U"]]],"^4O",null,"^4P",["^T",[null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^5V","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.",["^T",[["^U"],["^ ","~:pre",[["^T",["~$symbol?","^U"]]]],["^T",["^58",[["^ ","~:keys",["^4M"],"^V","~$test-ns"],["^T",["~$env/get-test-ns-info","^U"]]],["^T",["~$if-not","^5Z",[["^T",["^53",[],["^T",["~$println",["^T",["~$str","Namespace: ","^U"," not found, no tests to run."]]]]]]],["^T",["^4I","^4M"]]]]]]]]]]],"^5Q",false,"^8",49,"^5R",["^A",["~$cljs.core/IVector","^5S"]],"^:",49,"^5T",1,"^5U",true,"^4K",["^T",["^4L",["^T",[["^U"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"~$prepare-test-run",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",61,"^9",7,"^:",61,"^;",23,"^4K",["^T",["^4L",["^T",[[["^ ","^5Y",["~$report-fn"],"^V","^L"],"^4M"]]]]]],"^B","^2B","^7","shadow/test.cljs","^;",23,"^4N",["^T",[["~$p__9862","^4M"]]],"^4O",null,"^4P",["^T",[null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^64",[["^ ","^5Y",["^65"],"^V","^L"],"^4M"],["^T",["^58",["~$orig-report","^54"],[["^T",["^53",[],["^T",["~$ct/set-env!",["^T",["~$assoc","^L","~:shadow.test/report-fn","^67"]]]],["^T",["~$when","^65",["^T",["~$set!","^54","^65"]]]],["^T",["^5K",[["^5Z","~$ns-info"],["^T",["~$env/get-tests"]],"~:let",[["^ ","^5Y",["~$fixtures"]],"^6="]],["^T",["^5L",["~$fix",["^T",["~:once","^6@"]]],["^T",["~$ct/update-current-env!",["^5<"],"^69","^5Z","^6A"]]]],["^T",["^5L",["^6A",["^T",["~:each","^6@"]]],["^T",["^6C",["^5>"],"^69","^5Z","^6A"]]]]]],["^T",["^54",["^ ","^55","~:begin-run-tests","~:var-count",["^T",["~$count","^4M"]],"~:ns-count",["^T",["^4V","^4M",["^T",["~$map",["^T",["^4X",["~$p1__9861#"],["^T",["^4Z","^6J","^4[","^F"]]]]]],["^T",["~$set"]],["^T",["^6G"]]]]]]]]]]]]]]],"^5Q",false,"^8",61,"^5R","^63","^:",61,"^5T",2,"^5U",true,"^4K",["^T",["^4L",["^T",[[["^ ","^5Y",["^65"],"^V","^L"],"^4M"]]]]]],"~$finish-test-run",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",86,"^9",7,"^:",86,"^;",22,"^4K",["^T",["^4L",["^T",[["~$block"]]]]]],"^B","^1U","^7","shadow/test.cljs","^;",22,"^4N",["^T",[["^6M"]]],"^4O",null,"^4P",["^T",[null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^6L",["^6M"],["^ ","^5W",[["^T",["~$vector?","^6M"]]]],["^T",["~$conj","^6M",["^T",["^53",[],["^T",["^58",[["^ ","~:shadow.test/keys",["^65"],"^5Y",["~$report-counters"],"^V","^L"],["^T",["^59"]]],["^T",["^54",["^T",["^69","^6Q","^55","~:summary"]]]],["^T",["^54",["^T",["^69","^6Q","^55","~:end-run-tests"]]]],["^T",["^6<","^54","^65"]]]]]]]]]]],"^5Q",false,"^8",86,"^5R","~$clj","^:",86,"^5T",1,"^5U",true,"^4K",["^T",["^4L",["^T",[["^6M"]]]]]],"~$run-test-vars",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",98,"^9",7,"^:",98,"^;",20,"^4K",["^T",["^4L",["^T",[["~$test-vars"],["^L","^4M"]]]]],"^6","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env","~:top-fn",["^ ","^5Q",false,"~:fixed-arity",2,"^5T",2,"^4N",[["^6V"],["^L","^4M"]],"^4K",["^T",[["^6V"],["^L","^4M"]]],"^4P",["^T",[null,null]]]],"^B","^1N","^7","shadow/test.cljs","^;",20,"^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[["^6V"],["^L","^4M"]],"^4K",["^T",[["^6V"],["^L","^4M"]]],"^4P",["^T",[null,null]]],"^4N",[["^6V"],["^L","^4M"]],"^4O",null,"^6X",2,"^4P",["^T",[null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^6U","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env",["^T",[["^6V"],["^T",["^6U",["^T",["~$ct/empty-env"]],"^6V"]]]],["^T",[["^L","^4M"],["^T",["^4Z",["^T",["^64","^L","^4M"]],["^T",["~$into",["^T",["^4I","^4M"]]]],["^T",["^6L"]],["^T",["^5M"]]]]]]]]],"^5Q",false,"~:methods",[["^ ","^6X",1,"^5Q",false,"~:tag","^5S"],["^ ","^6X",2,"^5Q",false,"^70",["^A",["^5S","~$clj-nil"]]]],"^8",98,"^:",98,"^5T",2,"^5U",true,"^4K",["^T",[["^6V"],["^L","^4M"]]],"^6","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env"],"^5Z",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",108,"^9",7,"^:",108,"^;",14,"^4K",["^T",["^4L",["^T",[["^U"],["^L","^U"]]]]],"^6","test all vars for given namespace symbol","^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[["^U"],["^L","^U"]],"^4K",["^T",[["^U"],["^L","^U"]]],"^4P",["^T",[null,null]]]],"^B","^26","^7","shadow/test.cljs","^;",14,"^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[["^U"],["^L","^U"]],"^4K",["^T",[["^U"],["^L","^U"]]],"^4P",["^T",[null,null]]],"^4N",[["^U"],["^L","^U"]],"^4O",null,"^6X",2,"^4P",["^T",[null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^5Z","test all vars for given namespace symbol",["^T",[["^U"],["^T",["^5Z",["^T",["^6Y"]],"^U"]]]],["^T",[["^L","^U"],["^T",["^58",[["^ ","^5Y",["^4M"]],["^T",["^5[","^U"]]],["^T",["^4Z",["^T",["^64","^L","^4M"]],["^T",["^6Z",["^T",["^4I","^4M"]]]],["^T",["^6L"]],["^T",["^5M"]]]]]]]]]]],"^5Q",false,"^6[",[["^ ","^6X",1,"^5Q",false,"^70","^5S"],["^ ","^6X",2,"^5Q",false,"^70",["^A",["^5S","^71"]]]],"^8",108,"^:",108,"^5T",2,"^5U",true,"^4K",["^T",[["^U"],["^L","^U"]]],"^6","test all vars for given namespace symbol"],"~$run-tests",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",119,"^9",7,"^:",119,"^;",16,"^4K",["^T",["^4L",["^T",[[],["^L"],["^L","~$namespaces"]]]]],"^6","test all vars in specified namespace symbol set","^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[[],["^L"],["^L","^73"]],"^4K",["^T",[[],["^L"],["^L","^73"]]],"^4P",["^T",[null,null,null]]]],"^B","^2<","^7","shadow/test.cljs","^;",16,"^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[[],["^L"],["^L","^73"]],"^4K",["^T",[[],["^L"],["^L","^73"]]],"^4P",["^T",[null,null,null]]],"^4N",[[],["^L"],["^L","^73"]],"^4O",null,"^6X",2,"^4P",["^T",[null,null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^72","test all vars in specified namespace symbol set",["^T",[[],["^T",["^72",["^T",["^6Y"]]]]]],["^T",[["^L"],["^T",["^72","^L",["^T",["~$env/get-test-namespaces"]]]]]],["^T",[["^L","^73"],["^ ","^5W",[["^T",["~$set?","^73"]]]],["^T",["^58",["^4M",["^T",["^4V",["^T",["~$env/get-test-vars"]],["^T",["^5B",["^T",["^4X",["~$p1__9944#"],["^T",["~$contains?","^73",["^T",["^4Z","^77","^4[","^F"]]]]]]]]]]],["^T",["^4Z",["^T",["^64","^L","^4M"]],["^T",["^6Z",["^T",["^4I","^4M"]]]],["^T",["^6L"]],["^T",["^5M"]]]]]]]]]]],"^5Q",false,"^6[",[["^ ","^6X",0,"^5Q",false,"^70","^5S"],["^ ","^6X",1,"^5Q",false,"^70","^5S"],["^ ","^6X",2,"^5Q",false,"^70",["^A",["^5S","^71"]]]],"^8",119,"^:",119,"^5T",2,"^5U",true,"^4K",["^T",[[],["^L"],["^L","^73"]]],"^6","test all vars in specified namespace symbol set"],"~$run-all-tests",["^ ","^4J",null,"^5",["^ ","^7","shadow/test.cljs","^8",134,"^9",7,"^:",134,"^;",20,"^4K",["^T",["^4L",["^T",[[],["^L"],["^L","~$re"]]]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.","^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[[],["^L"],["^L","^7:"]],"^4K",["^T",[[],["^L"],["^L","^7:"]]],"^4P",["^T",[null,null,null]]]],"^B","^1@","^7","shadow/test.cljs","^;",20,"^6W",["^ ","^5Q",false,"^6X",2,"^5T",2,"^4N",[[],["^L"],["^L","^7:"]],"^4K",["^T",[[],["^L"],["^L","^7:"]]],"^4P",["^T",[null,null,null]]],"^4N",[[],["^L"],["^L","^7:"]],"^4O",null,"^6X",2,"^4P",["^T",[null,null,null]],"^9",1,"^4Q",["^ ","^4R","^4S","^4T",["^T",["^4U","^79","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.",["^T",[[],["^T",["^79",["^T",["^6Y"]],null]]]],["^T",[["^L"],["^T",["^79","^L",null]]]],["^T",[["^L","^7:"],["^T",["^72","^L",["^T",["^4V",["^T",["^74"]],["^T",["^5B",["^T",["^4X",["~$p1__9957#"],["^T",["~$or",["^T",["~$nil?","^7:"]],["^T",["~$re-matches","^7:",["^T",["^62","^7;"]]]]]]]]]],["^T",["^6Z",["^A",[]]]]]]]]]]]]],"^5Q",false,"^6[",[["^ ","^6X",0,"^5Q",false,"^70","^5S"],["^ ","^6X",1,"^5Q",false,"^70","^5S"],["^ ","^6X",2,"^5Q",false,"^70",["^A",["^5S","^71"]]]],"^8",134,"^:",134,"^5T",2,"^5U",true,"^4K",["^T",[[],["^L"],["^L","^7:"]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."]],"^R",["^ ","^M","^M","^I","^I","^J","^I","^K","^K","^L","^K"],"~:cljs.analyzer/constants",["^ ","^O",["^A",["^6D","~:report-counters","^F","^5>","^55","^6R","^6F","~:fixtures","^6S","^6B","^6E","^56","^6H","^5P","~:report-fn","^6:","^5D","~:vars","^5<"]],"~:order",["^55","^F","^56","^5<","^5>","^5D","^5P","^7C","^7B","^6:","^7A","^6B","^6D","^6F","^6H","^6E","^7@","^6R","^6S"]],"^W",["^ ","^P",["^A",[]]],"^X",["^ "],"^Y",["^N","^M","^I","^K"]],"^F","^C","~:ns-specs",["^ "],"~:ns-spec-vars",["^A",[]],"~:compiler-options",["^2G",[["^7G","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7G","~:shadow-tweaks"],null,["^7G","~:source-map-inline"],null,["^7G","~:elide-asserts"],true,["^7G","~:optimize-constants"],null,["^7G","^12"],null,["^7G","~:external-config"],null,["^7G","~:tooling-config"],null,["^7G","~:emit-constants"],null,["^7G","~:load-tests"],true,["^7G","~:form-size-threshold"],null,["^7G","~:global-goog-object&array"],null,["^7G","~:data-readers"],null,["^7G","~:infer-externs"],"~:auto",["^7G","^14"],null,["^7I","~:js-provider"],"^P",["~:mode"],"~:release",["^7G","~:fn-invoke-direct"],null,["^7G","~:source-map"],null]]]