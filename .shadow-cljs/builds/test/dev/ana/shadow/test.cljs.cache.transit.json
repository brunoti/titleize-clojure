["^ ","~:output",["^ ","~:js","goog.provide('shadow.test');\n/**\n * like ct/test-vars-block but more generic\n * groups vars by namespace, executes fixtures\n */\nshadow.test.test_vars_grouped_block = (function shadow$test$test_vars_grouped_block(vars){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p__9742){\nvar vec__9743 = p__9742;\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9743,(0),null);\nvar vars__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9743,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-test-ns\",\"begin-test-ns\",-1701237033),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n}),(function (){\nreturn cljs.test.block((function (){var env = cljs.test.get_current_env();\nvar once_fixtures = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167),ns], null));\nvar each_fixtures = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977),ns], null));\nvar G__9754 = cljs.test.execution_strategy(once_fixtures,each_fixtures);\nvar G__9754__$1 = (((G__9754 instanceof cljs.core.Keyword))?G__9754.fqn:null);\nswitch (G__9754__$1) {\ncase \"async\":\nreturn cljs.test.wrap_map_fixtures(once_fixtures,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.test.wrap_map_fixtures,each_fixtures),cljs.test.test_var_block),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"test\",\"test\",577538877),cljs.core.meta),vars__$1)], 0)));\n\nbreak;\ncase \"sync\":\nvar each_fixture_fn = cljs.test.join_fixtures(each_fixtures);\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nvar G__9763 = (function (){\nvar seq__9767 = cljs.core.seq(vars__$1);\nvar chunk__9768 = null;\nvar count__9769 = (0);\nvar i__9770 = (0);\nwhile(true){\nif((i__9770 < count__9769)){\nvar v = chunk__9768.cljs$core$IIndexed$_nth$arity$2(null,i__9770);\nvar temp__5804__auto___9966 = new cljs.core.Keyword(null,\"test\",\"test\",577538877).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nif(cljs.core.truth_(temp__5804__auto___9966)){\nvar t_9967 = temp__5804__auto___9966;\nvar G__9791_9968 = ((function (seq__9767,chunk__9768,count__9769,i__9770,t_9967,temp__5804__auto___9966,v,each_fixture_fn,G__9754,G__9754__$1,env,once_fixtures,each_fixtures,vec__9743,ns,vars__$1){\nreturn (function (){\nreturn cljs.test.run_block(cljs.test.test_var_block_STAR_(v,cljs.test.disable_async(t_9967)));\n});})(seq__9767,chunk__9768,count__9769,i__9770,t_9967,temp__5804__auto___9966,v,each_fixture_fn,G__9754,G__9754__$1,env,once_fixtures,each_fixtures,vec__9743,ns,vars__$1))\n;\n(each_fixture_fn.cljs$core$IFn$_invoke$arity$1 ? each_fixture_fn.cljs$core$IFn$_invoke$arity$1(G__9791_9968) : each_fixture_fn.call(null,G__9791_9968));\n} else {\n}\n\n\nvar G__9969 = seq__9767;\nvar G__9970 = chunk__9768;\nvar G__9971 = count__9769;\nvar G__9972 = (i__9770 + (1));\nseq__9767 = G__9969;\nchunk__9768 = G__9970;\ncount__9769 = G__9971;\ni__9770 = G__9972;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__9767);\nif(temp__5804__auto__){\nvar seq__9767__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__9767__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__9767__$1);\nvar G__9973 = cljs.core.chunk_rest(seq__9767__$1);\nvar G__9974 = c__5568__auto__;\nvar G__9975 = cljs.core.count(c__5568__auto__);\nvar G__9976 = (0);\nseq__9767 = G__9973;\nchunk__9768 = G__9974;\ncount__9769 = G__9975;\ni__9770 = G__9976;\ncontinue;\n} else {\nvar v = cljs.core.first(seq__9767__$1);\nvar temp__5804__auto___9977__$1 = new cljs.core.Keyword(null,\"test\",\"test\",577538877).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nif(cljs.core.truth_(temp__5804__auto___9977__$1)){\nvar t_9978 = temp__5804__auto___9977__$1;\nvar G__9812_9979 = ((function (seq__9767,chunk__9768,count__9769,i__9770,t_9978,temp__5804__auto___9977__$1,v,seq__9767__$1,temp__5804__auto__,each_fixture_fn,G__9754,G__9754__$1,env,once_fixtures,each_fixtures,vec__9743,ns,vars__$1){\nreturn (function (){\nreturn cljs.test.run_block(cljs.test.test_var_block_STAR_(v,cljs.test.disable_async(t_9978)));\n});})(seq__9767,chunk__9768,count__9769,i__9770,t_9978,temp__5804__auto___9977__$1,v,seq__9767__$1,temp__5804__auto__,each_fixture_fn,G__9754,G__9754__$1,env,once_fixtures,each_fixtures,vec__9743,ns,vars__$1))\n;\n(each_fixture_fn.cljs$core$IFn$_invoke$arity$1 ? each_fixture_fn.cljs$core$IFn$_invoke$arity$1(G__9812_9979) : each_fixture_fn.call(null,G__9812_9979));\n} else {\n}\n\n\nvar G__9980 = cljs.core.next(seq__9767__$1);\nvar G__9981 = null;\nvar G__9982 = (0);\nvar G__9983 = (0);\nseq__9767 = G__9980;\nchunk__9768 = G__9981;\ncount__9769 = G__9982;\ni__9770 = G__9983;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\nvar fexpr__9762 = cljs.test.join_fixtures(once_fixtures);\nreturn (fexpr__9762.cljs$core$IFn$_invoke$arity$1 ? fexpr__9762.cljs$core$IFn$_invoke$arity$1(G__9763) : fexpr__9762.call(null,G__9763));\n})], null);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__9754__$1)].join('')));\n\n}\n})());\n}),(function (){\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-test-ns\",\"end-test-ns\",1620675645),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n})], null);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.group_by((function (p1__9734_SHARP_){\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__9734_SHARP_));\n}),vars))], 0));\n});\n/**\n * Like test-ns, but returns a block for further composition and\n *   later execution.  Does not clear the current env.\n */\nshadow.test.test_ns_block = (function shadow$test$test_ns_block(ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nvar map__9854 = shadow.test.env.get_test_ns_info(ns);\nvar map__9854__$1 = cljs.core.__destructure_map(map__9854);\nvar test_ns = map__9854__$1;\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9854__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nif(cljs.core.not(test_ns)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"Namespace: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),\" not found, no tests to run.\"].join('')], 0));\n})], null);\n} else {\nreturn shadow.test.test_vars_grouped_block(vars);\n}\n});\nshadow.test.prepare_test_run = (function shadow$test$prepare_test_run(p__9862,vars){\nvar map__9863 = p__9862;\nvar map__9863__$1 = cljs.core.__destructure_map(map__9863);\nvar env = map__9863__$1;\nvar report_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9863__$1,new cljs.core.Keyword(null,\"report-fn\",\"report-fn\",-549046115));\nvar orig_report = cljs.test.report;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\ncljs.test.set_env_BANG_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(\"shadow.test\",\"report-fn\",\"shadow.test/report-fn\",1075704061),orig_report));\n\nif(cljs.core.truth_(report_fn)){\n(cljs.test.report = report_fn);\n} else {\n}\n\nvar seq__9864_9984 = cljs.core.seq(shadow.test.env.get_tests());\nvar chunk__9866_9985 = null;\nvar count__9867_9986 = (0);\nvar i__9868_9987 = (0);\nwhile(true){\nif((i__9868_9987 < count__9867_9986)){\nvar vec__9921_9988 = chunk__9866_9985.cljs$core$IIndexed$_nth$arity$2(null,i__9868_9987);\nvar test_ns_9989 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9921_9988,(0),null);\nvar ns_info_9990 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9921_9988,(1),null);\nvar map__9924_9991 = ns_info_9990;\nvar map__9924_9992__$1 = cljs.core.__destructure_map(map__9924_9991);\nvar fixtures_9993 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9924_9992__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar temp__5804__auto___9994 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures_9993);\nif(cljs.core.truth_(temp__5804__auto___9994)){\nvar fix_9995 = temp__5804__auto___9994;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_9989,fix_9995], 0));\n} else {\n}\n\nvar temp__5804__auto___9996 = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures_9993);\nif(cljs.core.truth_(temp__5804__auto___9996)){\nvar fix_9997 = temp__5804__auto___9996;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_9989,fix_9997], 0));\n} else {\n}\n\n\nvar G__9998 = seq__9864_9984;\nvar G__9999 = chunk__9866_9985;\nvar G__10000 = count__9867_9986;\nvar G__10001 = (i__9868_9987 + (1));\nseq__9864_9984 = G__9998;\nchunk__9866_9985 = G__9999;\ncount__9867_9986 = G__10000;\ni__9868_9987 = G__10001;\ncontinue;\n} else {\nvar temp__5804__auto___10002 = cljs.core.seq(seq__9864_9984);\nif(temp__5804__auto___10002){\nvar seq__9864_10003__$1 = temp__5804__auto___10002;\nif(cljs.core.chunked_seq_QMARK_(seq__9864_10003__$1)){\nvar c__5568__auto___10004 = cljs.core.chunk_first(seq__9864_10003__$1);\nvar G__10005 = cljs.core.chunk_rest(seq__9864_10003__$1);\nvar G__10006 = c__5568__auto___10004;\nvar G__10007 = cljs.core.count(c__5568__auto___10004);\nvar G__10008 = (0);\nseq__9864_9984 = G__10005;\nchunk__9866_9985 = G__10006;\ncount__9867_9986 = G__10007;\ni__9868_9987 = G__10008;\ncontinue;\n} else {\nvar vec__9925_10009 = cljs.core.first(seq__9864_10003__$1);\nvar test_ns_10010 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9925_10009,(0),null);\nvar ns_info_10011 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9925_10009,(1),null);\nvar map__9928_10012 = ns_info_10011;\nvar map__9928_10013__$1 = cljs.core.__destructure_map(map__9928_10012);\nvar fixtures_10014 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9928_10013__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar temp__5804__auto___10015__$1 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures_10014);\nif(cljs.core.truth_(temp__5804__auto___10015__$1)){\nvar fix_10016 = temp__5804__auto___10015__$1;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_10010,fix_10016], 0));\n} else {\n}\n\nvar temp__5804__auto___10017__$1 = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures_10014);\nif(cljs.core.truth_(temp__5804__auto___10017__$1)){\nvar fix_10018 = temp__5804__auto___10017__$1;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([test_ns_10010,fix_10018], 0));\n} else {\n}\n\n\nvar G__10019 = cljs.core.next(seq__9864_10003__$1);\nvar G__10020 = null;\nvar G__10021 = (0);\nvar G__10022 = (0);\nseq__9864_9984 = G__10019;\nchunk__9866_9985 = G__10020;\ncount__9867_9986 = G__10021;\ni__9868_9987 = G__10022;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.test.report.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-run-tests\",\"begin-run-tests\",309363062),new cljs.core.Keyword(null,\"var-count\",\"var-count\",-1513152110),cljs.core.count(vars),new cljs.core.Keyword(null,\"ns-count\",\"ns-count\",-1269070724),cljs.core.count(cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__9860_SHARP_){\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__9860_SHARP_));\n}),vars)))], null));\n})], null);\n});\nshadow.test.finish_test_run = (function shadow$test$finish_test_run(block){\nif(cljs.core.vector_QMARK_(block)){\n} else {\nthrow (new Error(\"Assert failed: (vector? block)\"));\n}\n\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(block,(function (){\nvar map__9948 = cljs.test.get_current_env();\nvar map__9948__$1 = cljs.core.__destructure_map(map__9948);\nvar env = map__9948__$1;\nvar report_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9948__$1,new cljs.core.Keyword(\"shadow.test\",\"report-fn\",\"shadow.test/report-fn\",1075704061));\nvar report_counters = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9948__$1,new cljs.core.Keyword(null,\"report-counters\",\"report-counters\",-1702609242));\ncljs.test.report.call(null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report_counters,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"summary\",\"summary\",380847952)));\n\ncljs.test.report.call(null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report_counters,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-run-tests\",\"end-run-tests\",267300563)));\n\nreturn (cljs.test.report = report_fn);\n}));\n});\n/**\n * tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\n */\nshadow.test.run_test_vars = (function shadow$test$run_test_vars(var_args){\nvar G__9954 = arguments.length;\nswitch (G__9954) {\ncase 1:\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$1 = (function (test_vars){\nreturn shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),test_vars);\n}));\n\n(shadow.test.run_test_vars.cljs$core$IFn$_invoke$arity$2 = (function (env,vars){\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.run_test_vars.cljs$lang$maxFixedArity = 2);\n\n/**\n * test all vars for given namespace symbol\n */\nshadow.test.test_ns = (function shadow$test$test_ns(var_args){\nvar G__9956 = arguments.length;\nswitch (G__9956) {\ncase 1:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),ns);\n}));\n\n(shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2 = (function (env,ns){\nvar map__9957 = shadow.test.env.get_test_ns_info(ns);\nvar map__9957__$1 = cljs.core.__destructure_map(map__9957);\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9957__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.test_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * test all vars in specified namespace symbol set\n */\nshadow.test.run_tests = (function shadow$test$run_tests(var_args){\nvar G__9960 = arguments.length;\nswitch (G__9960) {\ncase 0:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0());\n}));\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,shadow.test.env.get_test_namespaces());\n}));\n\n(shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,namespaces){\nif(cljs.core.set_QMARK_(namespaces)){\n} else {\nthrow (new Error(\"Assert failed: (set? namespaces)\"));\n}\n\nvar vars = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__9958_SHARP_){\nreturn cljs.core.contains_QMARK_(namespaces,new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__9958_SHARP_)));\n}),shadow.test.env.get_test_vars());\nreturn cljs.test.run_block(shadow.test.finish_test_run(cljs.core.into.cljs$core$IFn$_invoke$arity$2(shadow.test.prepare_test_run(env,vars),shadow.test.test_vars_grouped_block(vars))));\n}));\n\n(shadow.test.run_tests.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs all tests in all namespaces; prints results.\n *   Optional argument is a regular expression; only namespaces with\n *   names matching the regular expression (with re-matches) will be\n *   tested.\n */\nshadow.test.run_all_tests = (function shadow$test$run_all_tests(var_args){\nvar G__9963 = arguments.length;\nswitch (G__9963) {\ncase 0:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),null);\n}));\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(env,null);\n}));\n\n(shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,re){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__9961_SHARP_){\nvar or__5045__auto__ = (re == null);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.re_matches(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__9961_SHARP_));\n}\n}),shadow.test.env.get_test_namespaces())));\n}));\n\n(shadow.test.run_all_tests.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","~:file","shadow/test.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.test","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.test","^I","~$ct","^I","~$shadow.test.env","^K","~$env","^K","~$cljs.core","^M","~$goog","^N"],"~:seen",["^A",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^M","^M","^I","^I","^J","^I","^K","^K","^L","^K"],"~:form",["~#list",["~$ns","^C","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test",["^T",["^P",["^I","~:as","^J"],["^K","^V","^L"]]]]],"~:flags",["^ ","^P",["^A",[]]],"~:js-deps",["^ "],"~:deps",["^N","^M","^I","^K"]],"^F","^C","~:resource-id",["~:shadow.build.classpath/resource","shadow/test.cljs"],"~:compiled-at",1700249185130,"^D",["^ ","^I","^I","^J","^I","^K","^K","^L","^K","^M","^M","^N","^N"],"~:resource-name","shadow/test.cljs","~:warnings",[],"~:source","(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(defn test-vars-grouped-block\n  \"like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures\"\n  [vars]\n  (->> vars\n       (group-by #(-> % meta :ns))\n       ;; more predictable test ordering\n       ;; FIXME: should maybe also allow randomizing to detect tests that rely on call order\n       (sort-by first)\n       (mapcat (fn [[ns vars]]\n                 [(fn []\n                    (ct/report {:type :begin-test-ns :ns ns}))\n                  ;; FIXME: this is too complex, should simplify\n                  (fn []\n                    (ct/block\n                      (let [env (ct/get-current-env)\n                            once-fixtures (get-in env [:once-fixtures ns])\n                            each-fixtures (get-in env [:each-fixtures ns])]\n                        (case (ct/execution-strategy once-fixtures each-fixtures)\n                          :async\n                          (->> vars\n                               (filter (comp :test meta))\n                               (mapcat (comp (partial ct/wrap-map-fixtures each-fixtures)\n                                         ct/test-var-block))\n                               (ct/wrap-map-fixtures once-fixtures))\n                          :sync\n                          (let [each-fixture-fn (ct/join-fixtures each-fixtures)]\n                            [(fn []\n                               ((ct/join-fixtures once-fixtures)\n                                (fn []\n                                  (doseq [v vars]\n                                    (when-let [t (:test (meta v))]\n                                      ;; (alter-meta! v update :test disable-async)\n                                      (each-fixture-fn\n                                        (fn []\n                                          ;; (test-var v)\n                                          (ct/run-block\n                                            (ct/test-var-block* v (ct/disable-async t))))))))))])))))\n                  (fn []\n                    (ct/report {:type :end-test-ns :ns ns}))])\n         )))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([ns]\n   {:pre [(symbol? ns)]}\n   (let [{:keys [vars] :as test-ns} (env/get-test-ns-info ns)]\n\n     (if-not test-ns\n       [(fn []\n          (println (str \"Namespace: \" ns \" not found, no tests to run.\")))]\n       (test-vars-grouped-block vars)))))\n\n(defn prepare-test-run [{:keys [report-fn] :as env} vars]\n  (let [orig-report ct/report]\n    [(fn []\n       (ct/set-env! (assoc env ::report-fn orig-report))\n\n       (when report-fn\n         (set! ct/report report-fn))\n\n       ;; setup all known fixtures\n       (doseq [[test-ns ns-info] (env/get-tests)\n               :let [{:keys [fixtures]} ns-info]]\n         (when-let [fix (:once fixtures)]\n           (ct/update-current-env! [:once-fixtures] assoc test-ns fix))\n\n         (when-let [fix (:each fixtures)]\n           (ct/update-current-env! [:each-fixtures] assoc test-ns fix)))\n\n       ;; just in case report-fn wants to know when things starts\n       (ct/report {:type :begin-run-tests\n                   :var-count (count vars)\n                   :ns-count (->> vars\n                                  (map #(-> % meta :ns))\n                                  (set)\n                                  (count))}))]))\n\n(defn finish-test-run [block]\n  {:pre [(vector? block)]}\n  (conj block\n    (fn []\n      (let [{::keys [report-fn] :keys [report-counters] :as env} (ct/get-current-env)]\n        (ct/report (assoc report-counters :type :summary))\n        (ct/report (assoc report-counters :type :end-run-tests))\n        (set! ct/report report-fn)\n        ))))\n\n;; API Fns\n\n(defn run-test-vars\n  \"tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\"\n  ([test-vars]\n   (run-test-vars (ct/empty-env) test-vars))\n  ([env vars]\n   (-> (prepare-test-run env vars)\n       (into (test-vars-grouped-block vars))\n       (finish-test-run)\n       (ct/run-block))))\n\n(defn test-ns\n  \"test all vars for given namespace symbol\"\n  ([ns]\n   (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (let [{:keys [vars]} (env/get-test-ns-info ns)]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-tests\n  \"test all vars in specified namespace symbol set\"\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   {:pre [(set? namespaces)]}\n   (let [vars (->> (env/get-test-vars)\n                   (filter #(contains? namespaces (-> % meta :ns))))]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into #{})))))\n","~:reader-features",["^A",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["shadow.test/test-vars-grouped-block","vars","p1__9734#","cljs.core/group-by","cljs.core/meta","cljs.core.sort_by","cljs.core/first","cljs.core.mapcat","p__9742","vec__9743","cljs.core.nth","ns","cljs.test/report","cljs.test/block","env","cljs.test/get-current-env","once-fixtures","cljs.core.get_in","each-fixtures","G__9754","cljs.core/Keyword","js/Error","cljs.test/execution-strategy","cljs.core.filter","cljs.core.comp","cljs.core.partial","cljs.test/wrap-map-fixtures","cljs.test/test-var-block","each-fixture-fn","cljs.test/join-fixtures","G__9763","fexpr__9762","seq__9767","cljs.core/seq","chunk__9768","count__9769","i__9770","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","v","t","G__9791","G__9812","cljs.test/run-block","cljs.test/test-var-block*","cljs.test/disable-async","shadow.test/test-ns-block","cljs.core/Symbol","map__9854","cljs.core/--destructure-map","cljs.core.get","test-ns","shadow.test.env/get-test-ns-info","cljs.core/not","cljs.core.println","p__9862","map__9863","shadow.test/prepare-test-run","report-fn","orig-report","cljs.test/set-env!","cljs.core.assoc","seq__9864","chunk__9866","count__9867","i__9868","vec__9921","map__9924","vec__9925","map__9928","ns-info","shadow.test.env/get-tests","fixtures","fix","cljs.test.update_current_env_BANG_","cljs.core/assoc","p1__9860#","cljs.core.map","cljs.core/set","shadow.test/finish-test-run","block","cljs.core/vector?","cljs.core.conj","map__9948","report-counters","var_args","G__9954","shadow.test/run-test-vars","test-vars","shadow.test.run_test_vars","cljs.test.empty_env","cljs.core.into","G__9956","shadow.test/test-ns","shadow.test.test_ns","map__9957","G__9960","shadow.test/run-tests","shadow.test.run_tests","shadow.test.env/get-test-namespaces","namespaces","cljs.core/set?","shadow.test.env/get-test-vars","p1__9958#","cljs.core/contains?","G__9963","shadow.test/run-all-tests","shadow.test.run_all_tests","re","p1__9961#","or__5045__auto__","cljs.core/re-matches"]],"~:used-vars",["^A",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$cljs.core/comp","~$cljs.test/wrap-map-fixtures","~$shadow.test.env/get-test-namespaces","~$shadow.test/run-all-tests","~$cljs.core/vector?","~$cljs.core/filter","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.test/test-var-block","~$cljs.core/count","~$cljs.test/set-env!","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/group-by","~$cljs.test/empty-env","~$cljs.core/chunk-rest","~$cljs.core/set","~$shadow.test/run-test-vars","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$cljs.test/run-block","~$cljs.test/join-fixtures","~$shadow.test/finish-test-run","~$cljs.core/get-in","~$cljs.test/update-current-env!","~$cljs.test/execution-strategy","~$shadow.test.env/get-test-ns-info","~$cljs.core/get","~$cljs.core/-nth","~$shadow.test/test-ns-block","~$cljs.core/set?","~$cljs.core/nth","~$cljs.core/meta","~$cljs.core/println","~$shadow.test.env/get-test-vars","~$cljs.core/next","~$shadow.test/test-ns","~$shadow.test/test-vars-grouped-block","~$cljs.core/not","~$cljs.test/disable-async","~$cljs.core/assoc","~$cljs.test/test-var-block*","~$cljs.core/Symbol","~$shadow.test/run-tests","~$shadow.test.env/get-tests","~$cljs.core/first","~$cljs.core/sort-by","~$js/Error","~$cljs.test/get-current-env","~$shadow.test/prepare-test-run","~$cljs.core/chunked-seq?","~$cljs.test/report","~$cljs.test/block"]]],"~:cache-keys",["~#cmap",[["^[","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^A",[]],"~:deps-syms",["^N","~$goog.dom.HtmlElement"]]],["^[","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^[","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2S"]]],["^[","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R"]]],["^[","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2P","^2S"]]],["^[","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^M","~$clojure.string","~$goog.string","~$goog.string.StringBuffer"]]],["^[","shadow/test.cljs"],["d8887266b31c9258451f5988ad42fd9d21a83e36","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^M","^I","^K"]]],["^[","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R"]]],"~:SHADOW-TIMESTAMP",[1700248773000,1700248773000,1670199780000],["^[","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","~$goog.reflect"]]],["^[","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","~$goog.fs.blob","^2V","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2X","^2Y"]]],["^[","shadow/test/env.cljs"],["d8887266b31c9258451f5988ad42fd9d21a83e36","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^M"]]],["^[","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2X","~$goog.html.SafeUrl","^2Y","^2R","^2S"]]],["^[","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^34","~$goog.html.SafeStyle","^36","^2W","~$goog.html.uncheckedconversions","^2X","^2S"]]],["^[","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","~$goog.dom.TagName","^2R","~$goog.dom.element"]]],["^[","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2X","^34","^3;","~$goog.html.SafeStyleSheet","^36","^3=","^2W","^2Y","^2R","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2S","~$goog.dom.tags","^35"]]],["^[","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^3B"]]],["^[","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^3A","^2R","~$goog.collections.maps","^2[","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2Q"]]],["^[","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",[]]],["^[","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^3A","^3B"]]],["^[","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^M","^2[","^30"]]],["^[","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","~$goog.dom.safe","^3<","^2X","^2S"]]],["^[","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2S","^2U"]]],["^[","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","~$goog.flags"]]],["^[","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^3E","^3="]]],["^[","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","^3:","^34","^3;","^3?","^36","^2W","^2X","^2S"]]],["^[","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N"]]],["^[","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","~$goog.math.Long","~$goog.math.Integer","^2[","^3B","^3A","~$goog.Uri","^30"]]],["^[","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2X","^2Y","^35","^2R"]]],["^[","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2X","^3;","^2Y","^3B","^2R","^2S"]]],["^[","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^32"]]],["^[","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","^2["]]],["^[","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^2R","^2Y"]]],["^[","cljs/test.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2K",["^ ","^2L",null,"^2M",["^A",[]],"^2N",["^N","^M","^2Z","~$cljs.pprint"]]]]],"~:clj-info",["^ ","jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/test.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/thheller/shadow-cljs/2.26.0/shadow-cljs-2.26.0-aot.jar!/shadow/test/env.clj",1700248773000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/template.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/api.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1653011901000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1670199780000,"jar:file:/Users/bruno/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1670199780000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","^7","shadow/test.cljs","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>"],"^?",null,"^@",["^A",[]],"^B","^C","^D",["^ "],"^G",null,"^H",["^ ","^I","^I","^J","^I","^K","^K","^L","^K","^M","^M","^N","^N"],"^O",["^A",["^P"]],"~:shadow/js-access-global",["^A",["Error"]],"^Q",null,"~:defs",["^ ","~$test-vars-grouped-block",["^ ","~:protocol-inline",null,"^5",["^ ","^7","shadow/test.cljs","^8",7,"^9",7,"^:",7,"^;",30,"~:arglists",["^T",["~$quote",["^T",[["~$vars"]]]]],"^6","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures"],"^B","^29","^7","shadow/test.cljs","^;",30,"~:method-params",["^T",[["^4P"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^9",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^T",["~$defn","^4L","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures",["^4P"],["^T",["~$->>","^4P",["^T",["~$group-by",["^T",["~$fn*",["~$p1__9734#"],["^T",["~$->","^50","~$meta","^F"]]]]]],["^T",["~$sort-by","~$first"]],["^T",["~$mapcat",["^T",["~$fn",[["^U","^4P"]],[["^T",["^56",[],["^T",["~$ct/report",["^ ","~:type","~:begin-test-ns","^F","^U"]]]]],["^T",["^56",[],["^T",["~$ct/block",["^T",["~$let",["^L",["^T",["~$ct/get-current-env"]],"~$once-fixtures",["^T",["~$get-in","^L",["~:once-fixtures","^U"]]],"~$each-fixtures",["^T",["^5>","^L",["~:each-fixtures","^U"]]]],["^T",["~$case",["^T",["~$ct/execution-strategy","^5=","^5@"]],"~:async",["^T",["^4Y","^4P",["^T",["~$filter",["^T",["~$comp","~:test","^52"]]]],["^T",["^55",["^T",["^5F",["^T",["~$partial","~$ct/wrap-map-fixtures","^5@"]],"~$ct/test-var-block"]]]],["^T",["^5I","^5="]]]],"~:sync",["^T",["^5;",["~$each-fixture-fn",["^T",["~$ct/join-fixtures","^5@"]]],[["^T",["^56",[],["^T",[["^T",["^5M","^5="]],["^T",["^56",[],["^T",["~$doseq",["~$v","^4P"],["^T",["~$when-let",["~$t",["^T",["^5G",["^T",["^52","~$v"]]]]],["^T",["^5L",["^T",["^56",[],["^T",["~$ct/run-block",["^T",["~$ct/test-var-block*","~$v",["^T",["~$ct/disable-async","~$t"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],["^T",["^56",[],["^T",["^57",["^ ","^58","~:end-test-ns","^F","^U"]]]]]]]]]]]]]]],"~:variadic?",false,"^8",7,"~:ret-tag","~$any","^:",7,"~:max-fixed-arity",1,"~:fn-var",true,"^4N",["^T",["^4O",["^T",[["^4P"]]]]],"^6","like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures"],"~$test-ns-block",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",49,"^9",7,"^:",49,"^;",20,"^4N",["^T",["^4O",["^T",[["^U"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"^B","^21","^7","shadow/test.cljs","^;",20,"^4Q",["^T",[["^U"]]],"^4R",null,"^4S",["^T",[null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^5Y","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.",["^T",[["^U"],["^ ","~:pre",[["^T",["~$symbol?","^U"]]]],["^T",["^5;",[["^ ","~:keys",["^4P"],"^V","~$test-ns"],["^T",["~$env/get-test-ns-info","^U"]]],["^T",["~$if-not","^61",[["^T",["^56",[],["^T",["~$println",["^T",["~$str","Namespace: ","^U"," not found, no tests to run."]]]]]]],["^T",["^4L","^4P"]]]]]]]]]]],"^5T",false,"^8",49,"^5U",["^A",["~$cljs.core/IVector","^5V"]],"^:",49,"^5W",1,"^5X",true,"^4N",["^T",["^4O",["^T",[["^U"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"~$prepare-test-run",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",61,"^9",7,"^:",61,"^;",23,"^4N",["^T",["^4O",["^T",[[["^ ","^60",["~$report-fn"],"^V","^L"],"^4P"]]]]]],"^B","^2E","^7","shadow/test.cljs","^;",23,"^4Q",["^T",[["~$p__9862","^4P"]]],"^4R",null,"^4S",["^T",[null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^67",[["^ ","^60",["^68"],"^V","^L"],"^4P"],["^T",["^5;",["~$orig-report","^57"],[["^T",["^56",[],["^T",["~$ct/set-env!",["^T",["~$assoc","^L","~:shadow.test/report-fn","^6:"]]]],["^T",["~$when","^68",["^T",["~$set!","^57","^68"]]]],["^T",["^5N",[["^61","~$ns-info"],["^T",["~$env/get-tests"]],"~:let",[["^ ","^60",["~$fixtures"]],"^6@"]],["^T",["^5O",["~$fix",["^T",["~:once","^6C"]]],["^T",["~$ct/update-current-env!",["^5?"],"^6<","^61","^6D"]]]],["^T",["^5O",["^6D",["^T",["~:each","^6C"]]],["^T",["^6F",["^5A"],"^6<","^61","^6D"]]]]]],["^T",["^57",["^ ","^58","~:begin-run-tests","~:var-count",["^T",["~$count","^4P"]],"~:ns-count",["^T",["^4Y","^4P",["^T",["~$map",["^T",["^4[",["~$p1__9860#"],["^T",["^51","^6M","^52","^F"]]]]]],["^T",["~$set"]],["^T",["^6J"]]]]]]]]]]]]]]],"^5T",false,"^8",61,"^5U","^66","^:",61,"^5W",2,"^5X",true,"^4N",["^T",["^4O",["^T",[[["^ ","^60",["^68"],"^V","^L"],"^4P"]]]]]],"~$finish-test-run",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",86,"^9",7,"^:",86,"^;",22,"^4N",["^T",["^4O",["^T",[["~$block"]]]]]],"^B","^1V","^7","shadow/test.cljs","^;",22,"^4Q",["^T",[["^6P"]]],"^4R",null,"^4S",["^T",[null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^6O",["^6P"],["^ ","^5Z",[["^T",["~$vector?","^6P"]]]],["^T",["~$conj","^6P",["^T",["^56",[],["^T",["^5;",[["^ ","~:shadow.test/keys",["^68"],"^60",["~$report-counters"],"^V","^L"],["^T",["^5<"]]],["^T",["^57",["^T",["^6<","^6T","^58","~:summary"]]]],["^T",["^57",["^T",["^6<","^6T","^58","~:end-run-tests"]]]],["^T",["^6?","^57","^68"]]]]]]]]]]],"^5T",false,"^8",86,"^5U","~$clj","^:",86,"^5W",1,"^5X",true,"^4N",["^T",["^4O",["^T",[["^6P"]]]]]],"~$run-test-vars",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",98,"^9",7,"^:",98,"^;",20,"^4N",["^T",["^4O",["^T",[["~$test-vars"],["^L","^4P"]]]]],"^6","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env","~:top-fn",["^ ","^5T",false,"~:fixed-arity",2,"^5W",2,"^4Q",[["^6Y"],["^L","^4P"]],"^4N",["^T",[["^6Y"],["^L","^4P"]]],"^4S",["^T",[null,null]]]],"^B","^1O","^7","shadow/test.cljs","^;",20,"^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[["^6Y"],["^L","^4P"]],"^4N",["^T",[["^6Y"],["^L","^4P"]]],"^4S",["^T",[null,null]]],"^4Q",[["^6Y"],["^L","^4P"]],"^4R",null,"^6[",2,"^4S",["^T",[null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^6X","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env",["^T",[["^6Y"],["^T",["^6X",["^T",["~$ct/empty-env"]],"^6Y"]]]],["^T",[["^L","^4P"],["^T",["^51",["^T",["^67","^L","^4P"]],["^T",["~$into",["^T",["^4L","^4P"]]]],["^T",["^6O"]],["^T",["^5P"]]]]]]]]],"^5T",false,"~:methods",[["^ ","^6[",1,"^5T",false,"~:tag","^5V"],["^ ","^6[",2,"^5T",false,"^73",["^A",["^5V","~$clj-nil"]]]],"^8",98,"^:",98,"^5W",2,"^5X",true,"^4N",["^T",[["^6Y"],["^L","^4P"]]],"^6","tests all vars grouped by namespace, expects seq of test vars, can be obtained from env"],"^61",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",108,"^9",7,"^:",108,"^;",14,"^4N",["^T",["^4O",["^T",[["^U"],["^L","^U"]]]]],"^6","test all vars for given namespace symbol","^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[["^U"],["^L","^U"]],"^4N",["^T",[["^U"],["^L","^U"]]],"^4S",["^T",[null,null]]]],"^B","^28","^7","shadow/test.cljs","^;",14,"^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[["^U"],["^L","^U"]],"^4N",["^T",[["^U"],["^L","^U"]]],"^4S",["^T",[null,null]]],"^4Q",[["^U"],["^L","^U"]],"^4R",null,"^6[",2,"^4S",["^T",[null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^61","test all vars for given namespace symbol",["^T",[["^U"],["^T",["^61",["^T",["^70"]],"^U"]]]],["^T",[["^L","^U"],["^T",["^5;",[["^ ","^60",["^4P"]],["^T",["^62","^U"]]],["^T",["^51",["^T",["^67","^L","^4P"]],["^T",["^71",["^T",["^4L","^4P"]]]],["^T",["^6O"]],["^T",["^5P"]]]]]]]]]]],"^5T",false,"^72",[["^ ","^6[",1,"^5T",false,"^73","^5V"],["^ ","^6[",2,"^5T",false,"^73",["^A",["^5V","^74"]]]],"^8",108,"^:",108,"^5W",2,"^5X",true,"^4N",["^T",[["^U"],["^L","^U"]]],"^6","test all vars for given namespace symbol"],"~$run-tests",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",119,"^9",7,"^:",119,"^;",16,"^4N",["^T",["^4O",["^T",[[],["^L"],["^L","~$namespaces"]]]]],"^6","test all vars in specified namespace symbol set","^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[[],["^L"],["^L","^76"]],"^4N",["^T",[[],["^L"],["^L","^76"]]],"^4S",["^T",[null,null,null]]]],"^B","^2?","^7","shadow/test.cljs","^;",16,"^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[[],["^L"],["^L","^76"]],"^4N",["^T",[[],["^L"],["^L","^76"]]],"^4S",["^T",[null,null,null]]],"^4Q",[[],["^L"],["^L","^76"]],"^4R",null,"^6[",2,"^4S",["^T",[null,null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^75","test all vars in specified namespace symbol set",["^T",[[],["^T",["^75",["^T",["^70"]]]]]],["^T",[["^L"],["^T",["^75","^L",["^T",["~$env/get-test-namespaces"]]]]]],["^T",[["^L","^76"],["^ ","^5Z",[["^T",["~$set?","^76"]]]],["^T",["^5;",["^4P",["^T",["^4Y",["^T",["~$env/get-test-vars"]],["^T",["^5E",["^T",["^4[",["~$p1__9958#"],["^T",["~$contains?","^76",["^T",["^51","^7:","^52","^F"]]]]]]]]]]],["^T",["^51",["^T",["^67","^L","^4P"]],["^T",["^71",["^T",["^4L","^4P"]]]],["^T",["^6O"]],["^T",["^5P"]]]]]]]]]]],"^5T",false,"^72",[["^ ","^6[",0,"^5T",false,"^73","^5V"],["^ ","^6[",1,"^5T",false,"^73","^5V"],["^ ","^6[",2,"^5T",false,"^73",["^A",["^5V","^74"]]]],"^8",119,"^:",119,"^5W",2,"^5X",true,"^4N",["^T",[[],["^L"],["^L","^76"]]],"^6","test all vars in specified namespace symbol set"],"~$run-all-tests",["^ ","^4M",null,"^5",["^ ","^7","shadow/test.cljs","^8",134,"^9",7,"^:",134,"^;",20,"^4N",["^T",["^4O",["^T",[[],["^L"],["^L","~$re"]]]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.","^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[[],["^L"],["^L","^7="]],"^4N",["^T",[[],["^L"],["^L","^7="]]],"^4S",["^T",[null,null,null]]]],"^B","^1@","^7","shadow/test.cljs","^;",20,"^6Z",["^ ","^5T",false,"^6[",2,"^5W",2,"^4Q",[[],["^L"],["^L","^7="]],"^4N",["^T",[[],["^L"],["^L","^7="]]],"^4S",["^T",[null,null,null]]],"^4Q",[[],["^L"],["^L","^7="]],"^4R",null,"^6[",2,"^4S",["^T",[null,null,null]],"^9",1,"^4T",["^ ","^4U","^4V","^4W",["^T",["^4X","^7<","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.",["^T",[[],["^T",["^7<",["^T",["^70"]],null]]]],["^T",[["^L"],["^T",["^7<","^L",null]]]],["^T",[["^L","^7="],["^T",["^75","^L",["^T",["^4Y",["^T",["^77"]],["^T",["^5E",["^T",["^4[",["~$p1__9961#"],["^T",["~$or",["^T",["~$nil?","^7="]],["^T",["~$re-matches","^7=",["^T",["^65","^7>"]]]]]]]]]],["^T",["^71",["^A",[]]]]]]]]]]]]],"^5T",false,"^72",[["^ ","^6[",0,"^5T",false,"^73","^5V"],["^ ","^6[",1,"^5T",false,"^73","^5V"],["^ ","^6[",2,"^5T",false,"^73",["^A",["^5V","^74"]]]],"^8",134,"^:",134,"^5W",2,"^5X",true,"^4N",["^T",[[],["^L"],["^L","^7="]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."]],"^R",["^ ","^M","^M","^I","^I","^J","^I","^K","^K","^L","^K"],"~:cljs.analyzer/constants",["^ ","^O",["^A",["^6G","~:report-counters","^F","^5A","^58","^6U","^6I","~:fixtures","^6V","^6E","^6H","^59","^6K","^5S","~:report-fn","^6=","^5G","~:vars","^5?"]],"~:order",["^58","^F","^59","^5?","^5A","^5G","^5S","^7F","^7E","^6=","^7D","^6E","^6G","^6I","^6K","^6H","^7C","^6U","^6V"]],"^W",["^ ","^P",["^A",[]]],"^X",["^ "],"^Y",["^N","^M","^I","^K"]],"^F","^C","~:ns-specs",["^ "],"~:ns-spec-vars",["^A",[]],"~:compiler-options",["^2J",[["^7J","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7J","~:shadow-tweaks"],null,["^7J","~:source-map-inline"],null,["^7J","~:elide-asserts"],false,["^7J","~:optimize-constants"],null,["^7J","^12"],null,["^7J","~:external-config"],null,["^7J","~:tooling-config"],null,["^7J","~:emit-constants"],null,["^7J","~:load-tests"],true,["^7J","~:form-size-threshold"],null,["^7J","~:global-goog-object&array"],null,["^7J","~:data-readers"],null,["^7J","~:infer-externs"],"~:auto",["^7J","^14"],null,["^7L","~:js-provider"],"^P",["~:mode"],"~:dev",["^7J","~:fn-invoke-direct"],null,["^7J","~:source-map"],"/dev/null"]]]